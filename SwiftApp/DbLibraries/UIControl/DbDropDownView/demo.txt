
//
//  read_me.swift
//  PropzySam
//
//  Created by Dylan Bui on 12/21/18.
//  Copyright © 2018 Dylan Bui. All rights reserved.
//

class DemoViewController: UIViewController
{
    @IBOutlet weak var btnShow: UIButton!
    @IBOutlet weak var btnHide: UIButton!
    @IBOutlet weak var anchorDbDropDownView: UIView!
    @IBOutlet weak var anchorDbDropDownPanel: UIView!
    
    @IBOutlet weak var selectBoxView: UIView!
    var selectBox: DbSelectBox!
    
    var listView: DbDropDownView!
    var listViewPanel: DbDropDownView!
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.navigationItem.title = "Demo View Controller"
        // Do any additional setup after loading the view, typically from a nib.
        
        // -- selectBox 1 --
        self.selectBox = DbSelectBox(frame: CGRect(x: 20, y: 10, width: 250, height: 30))
        // self.selectBox.center = CGPoint(x: self.view.frame.midX, y: self.view.frame.midY - 100)
        self.selectBox.dropDownView.dataSourceStrings(["Mexico", "USA", "England", "France", "Germany", "Spain", "Italy", "Canada"])
        self.selectBox.placeholder = "Select your country..."
        // Max results list height - Default: No limit
        self.selectBox.dropDownView.tableListHeight = 200
        
        self.selectBox.didSelect { (options, index) in
            // print("selectBox: \(options.count) at index: \(index)")
        }
        
        //self.selectBox.center = self.selectBoxView.center
        self.selectBoxView.addSubview(self.selectBox)
        
        
        
        // -- example 2 --
        self.listView = DbDropDownView(withAnchorView: self.anchorDbDropDownView)
        self.listView.dataSourceStrings(["Mexico", "USA", "England", "France", "Germany", "Spain", "Italy", "Canada"])
        
        var theme = DbDropDownViewTheme.testTheme()
        theme.cellHeight = 0 // use auto
        self.listView.theme = theme
        // self.listView.animationType = .Bouncing
        self.listView.animationType = .Default
        self.listView.tableListHeight = 160
        // self.listView.hideOptionsWhenTouchOut = true
        
        
        self.listView.registerCellNib(nib: UINib(nibName: "DropDownCell", bundle: nil),
                                      forCellReuseIdentifier: "dropDownCell")
        // listView.registerCellString(identifier: "DropDownCell")
        
        //        listView.registerCellNib(nib: UINib(nibName: "CustomDropDownCell", bundle: nil),
        //                                 forCellReuseIdentifier: "customDropDownCell")
        
        //        listView.cellConfiguration { (options, indexPath, cell) in
        //            guard let ddCell = cell as? CustomDropDownCell else {
        //                print("Khong dung kieu CustomDropDownCell")
        //                return
        //            }
        //
        //            // Setup your custom UI components
        //            // cell.logoImageView.image = UIImage(named: "logo_\(index % 10)")
        //            guard let lbltext = ddCell.subLabel else {
        //                print("Khong dung kieu ddCell.subLabel")
        //                return
        //            }
        //
        //            lbltext.text = "\(indexPath.row) - " + options[indexPath.row].title + "- CustomDropDownCell"
        //        }
        
        self.listView.cellConfiguration { (options, indexPath, cell) in
            guard let ddCell = cell as? DropDownCell else {
                print("Khong dung kieu DropDownCell")
                return
            }
            
            // Setup your custom UI components
            // cell.logoImageView.image = UIImage(named: "logo_\(index % 10)")
            guard let lbltext = ddCell.optionLabel else {
                print("Khong dung kieu ddCell.optionLabel")
                return
            }
            
            lbltext.text = "\(indexPath.row) - " + options[indexPath.row].title + "- DropDownCell"
        }
        
        self.listView.didSelect { (options, index) in
            print("You just select: \(options.count) at index: \(index)")
        }
    }
    
    override func viewWillDisappear(_ animated: Bool)
    {
        super.viewWillDisappear(animated)
    }
    
    override func viewWillAppear(_ animated: Bool)
    {
        super.viewWillAppear(animated)
    }

    @IBAction func btnShowListView_Click(_ sender: AnyObject)
    {
        //self.selectBox.showSelectBox()
        self.listView.showDropDown()
    }
    
    @IBAction func btnHideListView_Click(_ sender: AnyObject)
    {
        //self.selectBox.hideSelectBox()
        self.listView.hideDropDown()
    }
    
    @IBAction func btnShowDownPanel_Click(_ sender: AnyObject)
    {
        // listViewPanel.showDropDown()
        // Define a header - Default: nothing
        // -- Show DbDropDownView same panel style --
        let header = UIView(frame: CGRect(x: 0, y: 0, width: self.anchorDbDropDownPanel.frame.width, height: 100))
        // header.backgroundColor = UIColor.cyan //UIColor.lightGray.withAlphaComponent(0.3)
        //        header.textAlignment = .center
        //        header.font = UIFont.systemFont(ofSize: 14)
        //        header.text = "TP Hồ Chí Minh"
        //        header.textColor = UIColor.blue
        header.backgroundColor = UIColor.cyan //UIColor.green.withAlphaComponent(0.5)
        
        let btn = UIButton.init(frame: CGRect(x: 20, y: 20, width: 50, height: 30))
        btn.setTitle("OK", for: .normal)
        btn.backgroundColor = UIColor.red
        btn.addTarget(self, action: #selector(self.buttonClicked), for: .touchUpInside)
        header.addSubview(btn)
        header.bringSubview(toFront: btn)
        
        self.listViewPanel = DbDropDownView(withAnchorView: self.anchorDbDropDownPanel)
        self.listViewPanel.showDropDown(WithView: header)
    }
    
    
    @objc func buttonClicked()
    {
        self.listViewPanel.hideDropDown()
    }
    
    @IBAction func btnShowUpPanel_Click(_ sender: AnyObject)
    {
        let header = UIView(frame: CGRect(x: 0, y: 0, width: self.anchorDbDropDownPanel.frame.width, height: 100))
        header.backgroundColor = UIColor.cyan //UIColor.green.withAlphaComponent(0.5)
        
        let btn = UIButton.init(frame: CGRect(x: 20, y: 20, width: 50, height: 30))
        btn.setTitle("OK", for: .normal)
        btn.backgroundColor = UIColor.red
        btn.addTarget(self, action: #selector(self.buttonClicked), for: .touchUpInside)
        header.addSubview(btn)
        header.bringSubview(toFront: btn)
        
        self.listViewPanel = DbDropDownView(withAnchorView: self.anchorDbDropDownPanel)
        self.listViewPanel.displayDirection = .BottomToTop
        self.listViewPanel.showDropDown(WithView: header)
    }
    
    
    @IBAction func btnUp_Click(_ sender: AnyObject)
    {
        let header_2 = UILabel(frame: CGRect(x: 0, y: 0, width: self.view.frame.width, height: 300))
        header_2.backgroundColor = UIColor.lightGray.withAlphaComponent(0.3)
        header_2.textAlignment = .center
        header_2.font = UIFont.systemFont(ofSize: 14)
        header_2.text = "btnUp_Click"
        header_2.textColor = UIColor.blue
        header_2.backgroundColor = UIColor.red.withAlphaComponent(0.8)
        
        let view = UIView(frame: header_2.frame)
        view.backgroundColor = UIColor.blue
        view.addSubview(header_2)
        
        let options: [DbSemiModalOption: Any] = [
            DbSemiModalOption.transitionStyle: DbSemiModalTransitionStyle.slideUp,
            .contentYOffset : 10,
            // DbSemiModalOption.animationDuration: 0.3
        ]
        
        self.db_presentSemiView(view, options: options)
    }
    
    @IBAction func btnCenter_Click(_ sender: AnyObject)
    {
        let header_2 = UILabel(frame: CGRect(x: 0, y: 0, width: self.view.frame.width, height: 300))
        header_2.backgroundColor = UIColor.lightGray.withAlphaComponent(0.3)
        header_2.textAlignment = .center
        header_2.font = UIFont.systemFont(ofSize: 14)
        header_2.text = "btnCenter_Click"
        header_2.textColor = UIColor.blue
        header_2.backgroundColor = UIColor.red.withAlphaComponent(0.8)
        
        let view = UIView(frame: header_2.frame)
        view.backgroundColor = UIColor.blue
        
        // -- Add custom background view , Bi loi khong su dung duoc --
        //        let blurEffect = UIBlurEffect(style: UIBlurEffectStyle.light)
        //        let blurEffectView = UIVisualEffectView(effect: blurEffect)
        //        blurEffectView.frame = view.bounds
        //        blurEffectView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        
        let options: [DbSemiModalOption: Any] = [
            DbSemiModalOption.transitionStyle: DbSemiModalTransitionStyle.slideCenter,
            // DbSemiModalOption.transitionStyle: DbSemiModalTransitionStyle.fadeInOutCenter,
            DbSemiModalOption.animationDuration: 0.3,
            .contentYOffset : -50,
            // .backgroundView : blurEffectView
        ]
        
        self.db_presentSemiView(view, options: options)
    }
    
    @IBAction func btnDown_Click(_ sender: AnyObject)
    {
        let header_2 = UILabel(frame: CGRect(x: 0, y: 0, width: self.view.frame.width, height: 300))
        header_2.backgroundColor = UIColor.lightGray.withAlphaComponent(0.3)
        header_2.textAlignment = .center
        header_2.font = UIFont.systemFont(ofSize: 14)
        header_2.text = "btnDown_Click"
        header_2.textColor = UIColor.blue
        header_2.backgroundColor = UIColor.red.withAlphaComponent(0.8)
        
        let view = UIView(frame: header_2.frame)
        view.backgroundColor = UIColor.blue
        view.addSubview(header_2)
        
        let options: [DbSemiModalOption: Any] = [
            DbSemiModalOption.transitionStyle: DbSemiModalTransitionStyle.slideDown,
            // .contentYOffset : 20,
            // DbSemiModalOption.animationDuration: 0.3
        ]
        
        self.db_presentSemiView(view, options: options)
    }
    
}


